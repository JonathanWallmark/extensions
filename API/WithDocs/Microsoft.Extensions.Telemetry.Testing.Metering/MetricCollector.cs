// Assembly 'Microsoft.Extensions.Telemetry.Testing'

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Metrics;

namespace Microsoft.Extensions.Telemetry.Testing.Metering;

/// <summary>
/// The helper class to automatically capture metering data that has been recorded
/// by instruments created by <see cref="T:System.Diagnostics.Metrics.Meter" />.
/// </summary>
/// <remarks>
/// This type has been designed to be used only for testing purposes.
/// </remarks>
[System.Diagnostics.CodeAnalysis.Experimental]
public class MetricCollector : IDisposable
{
    /// <summary>
    /// Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector" /> class.
    /// </summary>
    /// <param name="meterNames">The names of .NET <see cref="T:System.Diagnostics.Metrics.Meter" /> to capture measurements from.</param>
    /// <param name="timeProvider">The <see cref="T:System.TimeProvider" /> instance.</param>
    /// <remarks>
    /// This constructor is applicable for the scenario when metering data generated
    /// by active <see cref="T:System.Diagnostics.Metrics.Meter" /> instances which <see cref="P:System.Diagnostics.Metrics.Meter.Name" /> matches
    /// the one from the list <paramref name="meterNames" /> is to be captured.
    /// </remarks>
    public MetricCollector(IEnumerable<string> meterNames, TimeProvider? timeProvider = null);

    /// <summary>
    /// Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector" /> class.
    /// </summary>
    /// <param name="timeProvider">The <see cref="T:System.TimeProvider" /> instance.</param>
    /// <remarks>
    /// This constructor is applicable for the scenario when metering data
    /// generated by all the active <see cref="T:System.Diagnostics.Metrics.Meter" /> instances
    /// in the application is to be captured.
    /// </remarks>
    public MetricCollector(TimeProvider? timeProvider = null);

    /// <summary>
    /// Initializes a new instance of the <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector" /> class.
    /// </summary>
    /// <param name="meter">The <see cref="T:System.Diagnostics.Metrics.Meter" /> instance to capture metering data.</param>
    /// <param name="timeProvider">The <see cref="T:System.TimeProvider" /> instance.</param>
    /// <remarks>
    /// This constructor is applicable for the scenario when metering data
    /// generated by a specific <see cref="T:System.Diagnostics.Metrics.Meter" /> instance is to be captured.
    /// </remarks>
    public MetricCollector(Meter meter, TimeProvider? timeProvider = null);

    /// <summary>
    /// Clears all the captured metering data.
    /// </summary>
    public void Clear();

    /// <summary>
    /// Gets the object containing all the captured metering data that has been recorded by a counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="counterName">The metric name.</param>
    /// <returns>
    /// The <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" /> instance or <see langword="null" /> if a counter with given <paramref name="counterName" /> was not found.
    /// </returns>
    public MetricValuesHolder<T>? GetCounterValues<T>(string counterName) where T : struct;

    /// <summary>
    /// Gets the object containing all the captured metering data that has been recorded by a histogram instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="histogramName">The metric name.</param>
    /// <returns>
    /// The <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" /> instance or <see langword="null" /> if a histogram with given <paramref name="histogramName" /> was not found.
    /// </returns>
    public MetricValuesHolder<T>? GetHistogramValues<T>(string histogramName) where T : struct;

    /// <summary>
    /// Gets the object containing all the captured metering data that has been recorded by an updown counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="updownCounterName">The metric name.</param>
    /// <returns>
    /// The <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" /> instance or <see langword="null" /> if an updown counter with given <paramref name="updownCounterName" /> was not found.
    /// </returns>
    public MetricValuesHolder<T>? GetUpDownCounterValues<T>(string updownCounterName) where T : struct;

    /// <summary>
    /// Gets the object containing all the captured metering data that has been recorded by an observable gauge instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="observableGaugeName">The metric name.</param>
    /// <returns>
    /// The <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" /> instance or <see langword="null" /> if an observable gauge with given <paramref name="observableGaugeName" /> was not found.
    /// </returns>
    public MetricValuesHolder<T>? GetObservableGaugeValues<T>(string observableGaugeName) where T : struct;

    /// <summary>
    /// Gets the object containing all the captured metering data that has been recorded by an observable counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="observableCounterName">The metric name.</param>
    /// <returns>
    /// The <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" /> instance or <see langword="null" /> if an observable counter with given <paramref name="observableCounterName" /> was not found.
    /// </returns>
    public MetricValuesHolder<T>? GetObservableCounterValues<T>(string observableCounterName) where T : struct;

    /// <summary>
    /// Gets the object containing all the captured metering data that has been recorded by an observable updown counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="observableUpDownCounterName">The metric name.</param>
    /// <returns>
    /// The <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" /> instance or <see langword="null" /> if an observable updown counter with given <paramref name="observableUpDownCounterName" /> was not found.
    /// </returns>
    public MetricValuesHolder<T>? GetObservableUpDownCounterValues<T>(string observableUpDownCounterName) where T : struct;

    /// <summary>
    /// Gets a measurement value recorded by a counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="counterName">The metric name.</param>
    /// <param name="tags">The dimensions collection describing the measurement value.</param>
    /// <returns>The measurement value or <see langword="null" /> if the value was not recorded.</returns>
    public T? GetCounterValue<T>(string counterName, params KeyValuePair<string, object?>[] tags) where T : struct;

    /// <summary>
    /// Gets a measurement value recorded by a histogram instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="histogramName">The metric name.</param>
    /// <param name="tags">The dimensions collection describing the measurement value.</param>
    /// <returns>The measurement value or <see langword="null" /> if the value was not recorded.</returns>
    public T? GetHistogramValue<T>(string histogramName, params KeyValuePair<string, object?>[] tags) where T : struct;

    /// <summary>
    /// Gets a measurement value recorded by an updown counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="updownCounterName">The metric name.</param>
    /// <param name="tags">The dimensions collection describing the measurement value.</param>
    /// <returns>The measurement value or <see langword="null" /> if the value was not recorded.</returns>
    public T? GetUpDownCounterValue<T>(string updownCounterName, params KeyValuePair<string, object?>[] tags) where T : struct;

    /// <summary>
    /// Gets a measurement value recorded by an observable counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="observableCounterName">The metric name.</param>
    /// <param name="tags">The dimensions collection describing the measurement value.</param>
    /// <returns>The measurement value or <see langword="null" /> if the value was not recorded.</returns>
    public T? GetObservableCounterValue<T>(string observableCounterName, params KeyValuePair<string, object?>[] tags) where T : struct;

    /// <summary>
    /// Gets a measurement value recorded by an observable gauge instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="observableGaugeName">The metric name.</param>
    /// <param name="tags">The dimensions collection describing the measurement value.</param>
    /// <returns>The measurement value or <see langword="null" /> if the value was not recorded.</returns>
    public T? GetObservableGaugeValue<T>(string observableGaugeName, params KeyValuePair<string, object?>[] tags) where T : struct;

    /// <summary>
    /// Gets a measurement value recorded by an observable updown counter instrument.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <param name="observableUpDownCounterName">The metric name.</param>
    /// <param name="tags">The dimensions collection describing the measurement value.</param>
    /// <returns>The measurement value or <see langword="null" /> if the value was not recorded.</returns>
    public T? GetObservableUpDownCounterValue<T>(string observableUpDownCounterName, params KeyValuePair<string, object?>[] tags) where T : struct;

    /// <summary>
    /// Gets a list of all counters registered with this metrics collector.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <returns>Read only dictionary of <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" />.</returns>
    public IReadOnlyDictionary<string, MetricValuesHolder<T>>? GetAllCounters<T>() where T : struct;

    /// <summary>
    /// Gets a list of all UpDown counters registered with this metrics collector.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <returns>Read only dictionary of <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" />.</returns>
    public IReadOnlyDictionary<string, MetricValuesHolder<T>>? GetAllUpDownCounters<T>() where T : struct;

    /// <summary>
    /// Gets a list of all histograms registered with this metrics collector.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <returns>Read only dictionary of <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" />.</returns>
    public IReadOnlyDictionary<string, MetricValuesHolder<T>>? GetAllHistograms<T>() where T : struct;

    /// <summary>
    /// Gets a list of all observable counters registered with this metrics collector.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <returns>Read only dictionary of <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" />.</returns>
    public IReadOnlyDictionary<string, MetricValuesHolder<T>>? GetAllObservableCounters<T>() where T : struct;

    /// <summary>
    /// Gets a list of all observable UpDown counters registered with this metrics collector.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <returns>Read only dictionary of <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" />.</returns>
    public IReadOnlyDictionary<string, MetricValuesHolder<T>>? GetAllObservableUpDownCounters<T>() where T : struct;

    /// <summary>
    /// Gets a list of all observable Gauges registered with this metrics collector.
    /// </summary>
    /// <typeparam name="T">The type of metric measurement value.</typeparam>
    /// <returns>Read only dictionary of <see cref="T:Microsoft.Extensions.Telemetry.Testing.Metering.MetricValuesHolder`1" />.</returns>
    public IReadOnlyDictionary<string, MetricValuesHolder<T>>? GetAllObservableGauges<T>() where T : struct;

    /// <summary>
    /// Collects all observable instruments and records their measurements.
    /// </summary>
    public void CollectObservableInstruments();

    /// <inheritdoc />
    public void Dispose();

    /// <summary>
    /// Disponse the el.
    /// </summary>
    /// <param name="disposing">Disposing.</param>
    protected virtual void Dispose(bool disposing);
}
